Top 25 Pop Artists of the 21st Century via Billboard

Setlists: 
- The Eras Tour (Taylor Swift): 37i9dQZF1DX0D996ZXujBy
- Renaissance Tour (Beyonce): 59HEFq5MTQnL15aMiy256x
- Anti World Tour (Rihanna): 7yyTfDGxCtnzy2wwWI6xYn
- It's All A Blur (Drake): 5v88shNHPpzlGLVwMDJK7o
- The Chromatica Ball Tour (Lady Gaga): 6wrz4RKtDDsCat6IAfkMsj
- Piece of Me (Britney Spears): 7JokQIXFfBVzpMmJK9n2qa
- Saint Pablo (Kanye West): 4XGapCuHdovO1gSHh33f3v
- Justice (Justin Beiber): 1KaL7FQwS3O505agh3PEnH
- Sweetener (Ariana Grande): 5gzzyY3BiAXrJXxG2eDRhX
- Las Vegas Residency (Adele): 0VaEoCVKvxFnYae8fzOiAW
- Past Present Future (Usher): 5VsR8JjLIi9qq9y0A8H7mj
- 2024 Tour (Eminem): 3RhY58RrPl2eR68CZPI6Gk
- Pink Friday 2 (Nicki Minaj): 1uEKmq8sBYHn0KJNlT8x7m
- Forget Tomorrow World Tour (Justin Timberlake): 6p9tKgeHFNaFN7KcL9Tp9Z
- Attention Tour (Miley Cyrus): 0TN6oiFptUvS3r6elbuZ6p
_ 4:44 (Jay-Z): 5qPBuT71QMQWmduSalrSIm

Artists: 
- Taylor Swift: 06HL4z0CvFAxyc27GXpf02
- Beyonce: 6vWDO969PvNqNYHIOW5v0m
- Rihanna: 5pKCCKE2ajJHZ9KAiaK11H
- Drake: 3TVXtAsR1Inumwj472S9r4
- Lady Gaga: 1HY2Jd0NmPuamShAr6KMms
- Britney Spears: 26dSoYclwsYLMAKD3tpOr4
- Kanye West: 5K4W6rqBFWDnAN6FQUkS6x
- Justin Beiber: 1uNFoZAHBGtllmzznpCI3s
- Ariana Grande: 66CXWjxzNUsdJxJ2JdwvnR
- Adele: 4dpARuHxo51G3z768sgnrY
- Usher: 23zg3TcAtWQy7J6upgbUnj
- Eminem: 7dGJo4pcD2V6oG8kP0tJRR
- Nicki Minaj: 0hCNtLu0JehylgoiP8L4Gh
- Justin Timberlake: 31TPClRtHm23RisEBtV3X7
- Miley Cyrus: 5YGY8feqx7naU7z4HrwZM6
- Jay-Z: 3nFkdlSjzX9mRTtwJOzDYB



```{r}
library(spotifyr)
library(dplyr)
library(purrr)
library(tidyverse)
library(rlang)
```

```{r}
# fill in with personal client_ID and client_secret
Sys.setenv(SPOTIFY_CLIENT_ID = '')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '')

access_token <- get_spotify_access_token()
```

Logging all of our spotifyIDs into one vector:

```{r}
playlist_ids <- c(
  "37i9dQZF1DX0D996ZXujBy", "59HEFq5MTQnL15aMiy256x", "7yyTfDGxCtnzy2wwWI6xYn",
  "5v88shNHPpzlGLVwMDJK7o", "6wrz4RKtDDsCat6IAfkMsj", "7JokQIXFfBVzpMmJK9n2qa",
  "4XGapCuHdovO1gSHh33f3v", "1KaL7FQwS3O505agh3PEnH", "5gzzyY3BiAXrJXxG2eDRhX",
  "0VaEoCVKvxFnYae8fzOiAW", "5VsR8JjLIi9qq9y0A8H7mj", "3RhY58RrPl2eR68CZPI6Gk",
  "1uEKmq8sBYHn0KJNlT8x7m", "6p9tKgeHFNaFN7KcL9Tp9Z", "0TN6oiFptUvS3r6elbuZ6p",
  "5qPBuT71QMQWmduSalrSIm"
  )

artist_ids <- c(
  "06HL4z0CvFAxyc27GXpf02", "6vWDO969PvNqNYHIOW5v0m", "5pKCCKE2ajJHZ9KAiaK11H",
  "3TVXtAsR1Inumwj472S9r4", "1HY2Jd0NmPuamShAr6KMms", "26dSoYclwsYLMAKD3tpOr4", 
  "5K4W6rqBFWDnAN6FQUkS6x", "1uNFoZAHBGtllmzznpCI3s", "66CXWjxzNUsdJxJ2JdwvnR",
  "4dpARuHxo51G3z768sgnrY", "23zg3TcAtWQy7J6upgbUnj", "7dGJo4pcD2V6oG8kP0tJRR",
  "0hCNtLu0JehylgoiP8L4Gh", "31TPClRtHm23RisEBtV3X7", "5YGY8feqx7naU7z4HrwZM6",
  "3nFkdlSjzX9mRTtwJOzDYB"
)

artists <- list(
  "Taylor Swift" = "06HL4z0CvFAxyc27GXpf02",
  "Beyonce" = "6vWDO969PvNqNYHIOW5v0m",
  "Rihanna" = "5pKCCKE2ajJHZ9KAiaK11H",
  "Drake" = "3TVXtAsR1Inumwj472S9r4",
  "Lady Gaga" = "1HY2Jd0NmPuamShAr6KMms",
  "Britney Spears" = "26dSoYclwsYLMAKD3tpOr4",
  "Kanye West" = "5K4W6rqBFWDnAN6FQUkS6x",
  "Justin Beiber" = "1uNFoZAHBGtllmzznpCI3s",
  "Ariana Grande" = "66CXWjxzNUsdJxJ2JdwvnR", 
  "Adele" = "4dpARuHxo51G3z768sgnrY",
  "Usher" = "23zg3TcAtWQy7J6upgbUnj",
  "Eminem" = "7dGJo4pcD2V6oG8kP0tJRR",
  "Nicki Minaj" = "0hCNtLu0JehylgoiP8L4Gh",
  "Justin Timberlake" = "31TPClRtHm23RisEBtV3X7",
  "Miley Cyrus" = "5YGY8feqx7naU7z4HrwZM6",
  "Jay-Z" = "3nFkdlSjzX9mRTtwJOzDYB"
)

playlist_to_artist = list(
  "37i9dQZF1DX0D996ZXujBy" = "Taylor Swift",
  "59HEFq5MTQnL15aMiy256x" = "Beyonce",
  "7yyTfDGxCtnzy2wwWI6xYn" = "Rihanna",
  "5v88shNHPpzlGLVwMDJK7o" = "Drake",
  "6wrz4RKtDDsCat6IAfkMsj" = "Lady Gaga",
  "7JokQIXFfBVzpMmJK9n2qa" = "Britney Spears", 
  "4XGapCuHdovO1gSHh33f3v" = "Kanye West",
  "1KaL7FQwS3O505agh3PEnH" = "Justin Beiber",
  "5gzzyY3BiAXrJXxG2eDRhX" = "Ariana Grande",
  "0VaEoCVKvxFnYae8fzOiAW" = "Adele",
  "5VsR8JjLIi9qq9y0A8H7mj" = "Usher",
  "3RhY58RrPl2eR68CZPI6Gk" = "Eminem",
  "1uEKmq8sBYHn0KJNlT8x7m" = "Nicki Minaj",
  "6p9tKgeHFNaFN7KcL9Tp9Z" = "Justin Timberlake",
  "0TN6oiFptUvS3r6elbuZ6p" = "Miley Cyrus",
  "5qPBuT71QMQWmduSalrSIm" = "Jay"
)
```

```{r}
wrangle_data_func <- function(spotifyid){
  get_playlist_audio_features(
    "spotify", 
    playlist_uris = spotifyid, 
    access_token # spotify developer credentials
    ) |>
  # take out unnecessary columns
  select(-c(playlist_owner_id, added_at, is_local, primary_color, added_by.href, added_by.id, added_by.type, added_by.uri, 
            added_by.external_urls.spotify,track.preview_url, track.available_markets, track.type, track.episode, track.track,
            track.disc_number, track.href, track.is_local, track.album.available_markets, track.album.type, track.album.album_type,
            track.album.href, track.album.release_date_precision, track.album.artists, track.album.external_urls.spotify,
            track.external_ids.isrc, track.external_urls.spotify, video_thumbnail.url )) |>
  # create new cols to tell us where we are in the setlist
  mutate(setlist_song_num = row_number(),
         prop_thru_set = setlist_song_num / n())
}

# as list of separate data, use `map_df()` if want one big list
#all_playlists <- map(playlist_ids, wrangle_data_func)
all_data <- map_df(playlist_ids, wrangle_data_func) |>
  rename(duration_ms = track.duration_ms)
```


```{r}
audio_features <- c(
  "danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", 
  "liveness", "valence", "tempo", "duration_ms"
)
```

```{r}
get_mean_artist_feature <- function(artist_df, feature) {
  artist_df |>
    summarize(!!paste0("mean_", feature) := mean(!!sym(feature))
  )
}

get_mean_artist_features <- function(artist_id, features) {
  artist_df <- get_artist_audio_features(artist_id)
  return(map(features, partial(get_mean_artist_feature, artist_df = artist_df)) |> list_cbind())
}
```


```{r}
artists_data <- data.frame()

for (artist in names(artists)) {
  row <- get_mean_artist_features(artists[[artist]], audio_features)
  row$artist <- artist
  artists_data <- rbind(artists_data, row)
}
```


### Visualize audio features
```{r}
all_data <- all_data |>
  mutate(artist = as.character(playlist_to_artist[as.character(playlist_id)])) |>
  left_join(artists_data, by = "artist")
```


```{r}
visualize_feature <- function(data, feature) {
  mean_feature <- sym(paste0("mean_", feature))
    
  data |>
    ggplot(aes(x = prop_thru_set, y = data[[feature]])) + 
    # add geom_hline for mean feature value for artist
    geom_hline(aes(yintercept = data[[mean_feature]], color = "red")) +
    geom_point() +
    geom_smooth(se = FALSE) + 
    xlab("Set Progress") + 
    ylab(feature) + 
    facet_wrap(~ playlist_name) + 
    theme(legend.position = "none")
}
```

```{r}
visualize_feature(all_data, "danceability")
```
```{r}
visualize_feature(all_data, "energy")
```

```{r}
visualize_feature(all_data, "track.popularity")
# comment out geom_hline for this variable
```

### Get mean offsets for each audio feature
- inputs: prop thru set low, prop thru set high
- filter df for low < prop thru set in interval <= high
  - (maybe go by 2/17ths if going with a 34 song setlist, 2/17 * 34 = 4 songs), 2 songs at the end (closers/encores)
- group by playlist
- for each audio feature, calculate mean(feature - mean_feature) -- should become a row
- append to a new audio features dataset

```{r}
get_mean_offset <- function(prop_thru_set_low, prop_thru_set_high, audio_feature) {
  all_data |>
    filter(prop_thru_set > prop_thru_set_low, prop_thru_set <= prop_thru_set_high) |>
    group_by(playlist_name) |>
    summarize(offset = mean(!!sym(audio_feature) - !!sym(paste0("mean_", audio_feature)))) |>
    ungroup() |>
    summarize(!!sym(paste0("mean_", audio_feature, "_offset")) := mean(offset))
}

get_mean_offsets <- function(prop_thru_set_low, prop_thru_set_high, audio_features) {
  row <- map(audio_features, partial(get_mean_offset, 
                                     prop_thru_set_low = prop_thru_set_low, 
                                     prop_thru_set_high = prop_thru_set_high)) |> list_cbind()
  row$prop_thru_set_low = prop_thru_set_low
  row$prop_thru_set_high = prop_thru_set_high
  return(row)
}
```

```{r}
setlist_features <- data.frame()
prop <- 0

while (prop <= 1) {
  setlist_features <- rbind(setlist_features, get_mean_offsets(prop, min(prop + 2/17, 1), audio_features))
  prop <- prop + 2/17
}

setlist_features
```

```{r}
get_artist_audio_features(artist)
```

### Average number of songs in a setlist
```{r}
all_data |>
  group_by(playlist_id) |>
  summarize(count = n()) |>
  ungroup() |>
  summarize(num_songs = mean(count))
```

