---
execute:
  warning: false
  message: false
---

### Load libraries
```{r}
library(tidyverse)
library(httr)
library(jsonlite)
```
### Run API client
```{r}
url <- "https://api.themoviedb.org/3/authentication"

response <- VERB("GET", url, add_headers('Authorization' = 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhYjczMmU4NzhiZWVkYzMxYzNiN2Y3MDJhZWFmMDcxYyIsIm5iZiI6MTczMzM1MDcyMi4xOTYsInN1YiI6IjY3NTBkNTQyNWFjZTk4YmE0NmQ0ODU5NyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9LGR9bjTfxEoEGfSv0con3tA9yBuRpNSpFnTDb1jUkA'), content_type("application/octet-stream"), accept("application/json"))

content(response, "text")
```

### Load in Kaggle dataset of Oscar nominees from 1927-2024
```{r}
oscar_nominees <- read.csv("the_oscar_award.csv")
```

### Search for a movie given title and year (to retrieve movie_id)
```{r}
# function to search for a movie by title and year
search_movie <- function(movie_title, year) {
  url <- "https://api.themoviedb.org/3/search/movie"
  
  # parameters for the query
  queryString <- list(
    query = movie_title,
    year = as.character(year)
  )
  
  response <- GET(url, query = queryString, 
                  add_headers('Authorization' = 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhYjczMmU4NzhiZWVkYzMxYzNiN2Y3MDJhZWFmMDcxYyIsIm5iZiI6MTczMzM1MDcyMi4xOTYsInN1YiI6IjY3NTBkNTQyNWFjZTk4YmE0NmQ0ODU5NyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9LGR9bjTfxEoEGfSv0con3tA9yBuRpNSpFnTDb1jUkA'),
                  content_type("application/octet-stream"),
                  accept("application/json"))
  
  # check for response status
  if (http_error(response)) {
    stop("Failed to retrieve movie data. HTTP Status: ", status_code(response))
  }
  
  # parse json
  response_content <- content(response, "text")
  json_data <- fromJSON(response_content)
  
  # return the top movie hit
  if (length(json_data$results) > 0) {
    return(
      as.data.frame(json_data$results |>
        arrange(desc(popularity)) |> # choose based on popularity
        head(1)
    ))
  } else {
    return(NULL) # No results found
  }
}
```

```{r}
# test case for parasite
parasite <- search_movie("Parasite", 2020)
print(parasite)
```

```{r}
# Test case for the movie "Titanic" (1997)
titanic <- search_movie("Titanic", 1997)
print(titanic)
```

```{r}
movie_details <- apply(oscar_nominees, 1, function(row) {
  search_movie(row["film"], row["year_film"])
})

#combine all calls into one df
movie_details_df <- do.call(rbind, movie_details)

movie_details_df
```


### Search for a movie's additional details given movie_id
```{r}
fields <- c("adult", "backdrop_path", "belongs_to_collection", "budget", "genres", "homepage", "id", "imdb_id", "original_language", "original_title", "overview", "popularity", "poster_path", "production_companies", "production_countries", "release_date", "revenue", "runtime", "spoken_languages", "status", "tagline", "title", "video", "vote_average", "vote_count")
```

```{r}
parse_field <- function(json_data, field) {
  return(ifelse(!is.null(json_data[[field]]), json_data[[field]], NA))
}
```

```{r}
search_movie_extra <- function(movie_id) {
  url <- paste0("https://api.themoviedb.org/3/movie/", movie_id)
  
  # Make the GET request with the Authorization header and JSON accept header
  response <- GET(url, 
                  add_headers('Authorization' = 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhYjczMmU4NzhiZWVkYzMxYzNiN2Y3MDJhZWFmMDcxYyIsIm5iZiI6MTczMzM1MDcyMi4xOTYsInN1YiI6IjY3NTBkNTQyNWFjZTk4YmE0NmQ0ODU5NyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9LGR9bjTfxEoEGfSv0con3tA9yBuRpNSpFnTDb1jUkA'),
                  content_type("application/octet-stream"), 
                  accept("application/json"))
  
  # Check for response status
  if (http_error(response)) {
    stop("Failed to retrieve movie data. HTTP Status: ", status_code(response))
  }
  
  # Parse the JSON response
  response_content <- content(response, "text")
  json_data <- fromJSON(response_content)
  
  result <- data.frame(matrix(ncol = length(fields), nrow = 1))
  colnames(result) <- fields
  
  # Safely extract all the available fields
  if (length(json_data) > 0) {
    for (field in fields) {
      result[[field]] = parse_field(json_data, field)
    }
    
    return(result) 
  } else {
    return(data.frame())
  }
}

```

```{r}
# test case for fightclub
fightclub <- search_movie_extra(550)
print(fightclub)
```

### Function to parse through movie_details_df for extra functions

```{r}
movie_data <- map_df(unique(movie_details_df$id), search_movie_extra)
```

```{r}
# look into this
length(unique(movie_details_df$id))
length(unique(oscar_nominees$film))
```

```{r}
movie_data$year = as.integer(substr(movie_data$release_date, 1, 4))
```


```{r}
# fix to join by movie AND year, need to parse year from movie data
all_data <- left_join(oscar_nominees, movie_data, by = c("film" = "title", "year_film" = "year"))
```


### Rename film to title for consistency -- prep for joining
```{r}
library(dplyr)
oscar_nominees <- oscar_nominees |> 
  rename(title = film) # change to match movie_details_df, film -> title
```

```{r}
join_oscar <- left_join(oscar_nominees, movie_details_df, by = "title")
join_tmdb <- left_join(movie_details_df, oscar_nominees, by = "title")
# many-to-many is expected, same movie is nominated for diff categories
```

```{r}
library(tidyverse)
library(dplyr)
library(tidyr)
# pivot wider to unnest column 'genre_ids' 

join_tmdb <- join_tmdb |> 
  mutate(genre_ids = ifelse(is.list(genre_ids), genre_ids, list(genre_ids))) |> #make all lists
  unnest_longer(genre_ids) |>  #unlist all
  mutate(value = 1) |>  # add a helper column with 1s
  pivot_wider(names_from = genre_ids, values_from = value, values_fill = 0)
 
#error its too large when unnesting/pivot long LOL 
```

```{r}
write.csv(join_tmdb,"/Users/jazellesaligumba/Desktop/groupB-spotify/tmdb/join_tmdb.csv", row.names = FALSE)
```


work on:
- function to filter top movie (based on popularity?) [done]
- function to query movies based on kaggle [done]
- rbind all movies with tmdb data [done]
- left join tmdb and kaggle [done]


- realized we used an api function (search) that didn't get other variables (details like revenue),
will try to change it


