---
execute:
  warning: false
  message: false
---

### Load libraries
```{r}
library(tidyverse)
library(httr)
library(jsonlite)
```
### Run API client
```{r}
url <- "https://api.themoviedb.org/3/authentication"

personal_authorization <- paste0('Bearer ', "")

response <- VERB("GET", url, add_headers('Authorization' =  personal_authorization), 
                 content_type("application/octet-stream"), accept("application/json"))

content(response, "text")
```

### Load in Kaggle dataset of Oscar nominees from 1927-2024
```{r}
oscar_nominees <- read.csv("the_oscar_award.csv")
```

### Search for a movie given title and year (to retrieve movie_id)
```{r}
# function to search for a movie by title and year
search_movie <- function(auth, movie_title, year) {
  url <- "https://api.themoviedb.org/3/search/movie"
  
  # parameters for the query
  queryString <- list(
    query = movie_title,
    year = as.character(year)
  )
  
  response <- VERB("GET", url, query = queryString, add_headers('Authorization' = auth), content_type("application/octet-stream"), accept("application/json"))
  
  # check for response status
  if (http_error(response)) {
    stop("Failed to retrieve movie data. HTTP Status: ", status_code(response))
  }
  
  # parse json
  response_content <- content(response, "text")
  json_data <- fromJSON(response_content)
  
  # return the top movie hit
  if (length(json_data$results) > 0) {
    return(
      as.data.frame(json_data$results |>
        arrange(desc(popularity)) |> # choose based on popularity
        head(1)
    ))
  } else { # modify to search +/- 1
    return(NULL) # No results found
  }
}
```

```{r}
# test case for parasite
parasite <- search_movie(personal_authorization, "Parasite", 2020)
print(parasite)
```



```{r}
movie_details <- apply(oscar_nominees, 1, function(row) {
  search_movie(personal_authorization, row["film"], row["year_film"])
})

#combine all calls into one df
movie_details_df <- do.call(rbind, movie_details)

movie_details_df
```

```{r}
saveRDS(search_movie_extra, "search_movie_extra.rds")
```


### Search for a movie's additional details given movie_id
```{r}
input_fields <- c("adult", "backdrop_path", "belongs_to_collection", "budget", "genres", "homepage", "id", "imdb_id", "original_language", "original_title", "overview", "popularity", "poster_path", "production_companies", "production_countries", "release_date", "revenue", "runtime", "spoken_languages", "status", "tagline", "title", "video", "vote_average", "vote_count")
```

```{r}
search_movie_extra <- function(auth, movie_id, fields) {
  parse_field <- function(json_data, field) {
    return(ifelse(!is.null(json_data[[field]]), json_data[[field]], NA))
  }
  
  url <- paste0("https://api.themoviedb.org/3/movie/", movie_id)
  
  # Make the GET request with the Authorization header and JSON accept header
  response <- GET(url, 
                  add_headers('Authorization' = auth),
                  content_type("application/octet-stream"), 
                  accept("application/json"))
  
  # Check for response status
  if (http_error(response)) {
    stop("Failed to retrieve movie data. HTTP Status: ", status_code(response))
  }
  
  # Parse the JSON response
  response_content <- content(response, "text")
  json_data <- fromJSON(response_content)
  
  result <- data.frame(matrix(ncol = length(fields), nrow = 1))
  colnames(result) <- fields
  
  # Safely extract all the available fields
  if (length(json_data) > 0) {
    for (field in fields) {
      result[[field]] = parse_field(json_data, field)
    }
    
    return(result) 
  } else {
    return(data.frame())
  }
}
```

```{r}
# test case for fightclub
fightclub <- search_movie_extra(personal_authorization, 550, input_fields)
print(fightclub)
```

### Function to parse through movie_details_df for extra functions

```{r}
movie_data <- map_df(unique(movie_details_df$id), partial(search_movie_extra, 
                                                          auth = personal_authorization, 
                                                          fields = input_fields))
```


```{r}
movie_data$release_year = as.integer(substr(movie_data$release_date, 1, 4))
movie_data$release_month = as.integer(substr(movie_data$release_date, 6, 7))
```


```{r}
# fix to join by movie AND year, need to parse year from movie data
all_data <- left_join(oscar_nominees, movie_data, by = c("film" = "title")) |>
  filter(abs(year_film - release_year) <= 1) |>
  group_by(film, year_film) |>
  mutate(won_at_least_one = ifelse(sum(winner == "True") >= 1, TRUE, FALSE)) |>
  ungroup()
```

```{r}
saveRDS(genres_dict, "genres_dict.rds")
```

----- run up to here then switch to rf.qmd for rf data preprocessing ------



### Rename film to title for consistency -- prep for joining
```{r}
library(dplyr)
oscar_nominees <- oscar_nominees |> 
  rename(title = film) # change to match movie_details_df, film -> title
```

```{r}
join_oscar <- left_join(oscar_nominees, movie_details_df, by = "title")
join_tmdb <- left_join(movie_details_df, oscar_nominees, by = "title")
# many-to-many is expected, same movie is nominated for diff categories
```

### Gathering stats about the list columns 
(genre, production_countries, production_companies, spoken_languages)
```{r}
# Making each genre into a column
# get the list of movie genres from API
movie_list <- VERB("GET", 
                   "https://api.themoviedb.org/3/genre/movie/list", 
                   query = list(language = "en"), 
                   add_headers('Authorization' = personal_authorization),
                   content_type("application/octet-stream"), 
                   accept("application/json"))
movie_list_content <- content(movie_list, "parsed")

# make the genres list into a data frame to refer to later on
genres_list <- data.frame(
  id = sapply(movie_list_content$genres, function(x) x$id),
  name = sapply(movie_list_content$genres, function(x) x$name),
  stringsAsFactors = FALSE
)
genres_dict <- setNames(genres_list$name, genres_list$id)
```

```{r}
# finding common/top of genres, companies, countries, and languages
movie_details_df$genre_ids <- map(movie_details_df$genre_ids, ~ if (is.list(.)) unlist(.) else .)
common_genres <- movie_details_df |>
  unnest(genre_ids) |>
  select(genre_ids) |>
  group_by(genre_ids) |>
  mutate(genre_ids = genres_dict[as.character(genre_ids)]) |> 
  summarize(count_genres = n()) |>
  arrange(desc(count_genres))

common_companies <- all_data |>
  unnest(production_companies) |>
  select(production_companies) |>
  group_by(production_companies) |>
  summarize(count_company = n()) |>
  arrange(desc(count_company))
top_companies <- c(174, 4, 21, 25, 5)

#top 5 languages 
common_languages <- all_data |>
  unnest(spoken_languages) |>
  select(spoken_languages) |>
  group_by(spoken_languages) |>
  summarize(count_language = n()) |>
  arrange(desc(count_language))
top_languages <- c("English", "French", "German", "Spanish", "Italian")
  
# top 6 countries 
common_countries <- all_data |>
  unnest(production_countries) |>
  select(production_countries) |>
  group_by(production_countries) |>
  summarize(count_country = n()) |>
  arrange(desc(count_country))
top_countries <- c("US", "GB", "FR",  "DE", "IT", "CA")
```

### Flattening the Data
```{r}
# function for adding genre columns
wider_by_genre <- function(df) {
  # make sure all values are vectors
  df$genre_ids <- map(df$genre_ids, ~ if (is.list(.)) unlist(.) else .)
    
  # now, change all the number values to be genres(char)
  new_df <- df |>
    unnest(genre_ids) |> 
    distinct() |>
    mutate(genre_ids = genres_dict[as.character(genre_ids)]) |> 
    mutate(valid_id = 1) |> # create binary value for the pivot_wider to use
    pivot_wider(names_from = genre_ids, values_from = valid_id, 
                values_fill = 0) # use names_prefix if want "genre_"
  
  return(new_df)
}

# testing the function above
wide_genre_join_tmdb <- wider_by_genre(join_tmdb)
```

```{r}
# more generic flattening of lists
flatten_lists <- function(df, feature, top_vector, prefix) {
  # make sure all values in the specified column are vectors
  df[[feature]] <- map(df[[feature]], ~ if (is.list(.)) unlist(.) else .)
  df$feature[is.null(df$feature)] <- NA

  # now, change all the number values 
  new_df <- df |> 
    unnest({{feature}}) |>  # unnest the specified column
    mutate(valid_value = 1, # create binary value for pivot_wider
           temp_feature = case_when(
             .data[[feature]] %in% top_vector ~ as.character(.data[[feature]]), 
             TRUE ~ "Other")) |>  
    select(-{{feature}}, -feature) |>
    distinct() |>
    pivot_wider(names_from = temp_feature, values_from = valid_value, 
                names_prefix = prefix, values_fill = 0)
  
  return(new_df)
}

# testing this flattening 
flatten_lists(fightclub, "production_countries", top_countries, "country_")
flatten_lists(fightclub, "spoken_languages", top_languages, "lang_")
#flatten_lists(fightclub, "production_companies", top_companies, "company_")
```

### Count Num. Nominations and Num Wins
```{r}
# count # of nominations and # of wins and make data compact
all_data |>
  group_by(film) |>
  mutate(num_noms = n(),
         num_wins = sum(ifelse(winner == "True", 1, 0))) |>
  ungroup() |>
  select(-category, -name, -winner) |>
  distinct()
```

### Making CSV files
```{r, eval=FALSE}
write.csv(wider_by_genre(movie_details_df),
          "/Users/kellieau/Desktop/School/Pomona/ThirdYear/Fall2024/CompStats/groupB-spotify/tmdb/movie_details_df.csv", 
          row.names = FALSE)

all_data |>
  mutate(genre_ids = genres) |>
  select(-genres) |>
  wider_by_genre() |>
  flatten_lists(fightclub, "production_countries", top_countries, "country_")
  flatten_lists(fightclub, "spoken_languages", top_languages, "lang_")
  flatten_lists("production_companies", top_companies, "company_") |>
  select(-belongs_to_collection) |>
  write.csv("/Users/kellieau/Desktop/School/Pomona/ThirdYear/Fall2024/CompStats/groupB-spotify/tmdb/all_data.csv",
            row.names = FALSE)
```

```{r, eval=FALSE}
write.csv(join_tmdb,"/Users/jazellesaligumba/Desktop/groupB-spotify/tmdb/join_tmdb.csv", row.names = FALSE)
```

### Preprocessing data for Model
```{r}
# preprocess data 
rf_data <- all_data |>
  filter(year_ceremony >= 1975) |>
  mutate(genre_ids = genres,
         release_month = as.integer(substr(release_date, 6, 7))) |>
  select(-spoken_languages, -production_countries, -production_companies, 
         -belongs_to_collection, -genres) |>
  wider_by_genre()
```

```{r}
data <- all_data
```

```{r}
plot_feature <- function(feature, nom) {
  data |>
    filter(category == nom) |>
    ggplot() +
    geom_jitter(aes(x = year, y = !!sym(feature), color = winner))
}
```

```{r}
plot_feature("budget", "BEST PICTURE")
```

```{r}
data |>
  ggplot() +
  geom_point(aes(x = year, y = (revenue / budget), color = winner))
```



```{r}
data |>
  filter(category == "BEST PICTURE") |>
  arrange(desc(budget))
```


### Random Forest Model




work on:
- function to filter top movie (based on popularity?) [done]
- function to query movies based on kaggle [done]
- rbind all movies with tmdb data [done]
- left join tmdb and kaggle [done]


- realized we used an api function (search) that didn't get other variables (details like revenue),
will try to change it


